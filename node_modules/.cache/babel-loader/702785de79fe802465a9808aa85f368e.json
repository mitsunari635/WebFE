{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const cleanPath = this._removeEmptyFolders(path);\n\n        const _path = this._getFinalPath(cleanPath);\n\n        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({\n          method,\n          body: body,\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n\n      const _path = this._getFinalPath(cleanPath);\n\n      const url = new URL(this.url + `/object/upload/sign/${_path}`);\n      url.searchParams.set('token', token);\n\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const res = yield this.fetch(url.toString(), {\n          method: 'PUT',\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n\n\n  createSignedUploadUrl(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n          headers: this.headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n\n\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n\n    let queryString = _queryString.join('&');\n\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n\n  transformOptsToQueryString(transform) {\n    const params = [];\n\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`);\n    }\n\n    return params.join('&');\n  }\n\n}","map":{"version":3,"sources":["../../../src/packages/StorageFileApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n    createSignedUploadUrl(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers: this.headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    copy(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map"]},"metadata":{},"sourceType":"module"}