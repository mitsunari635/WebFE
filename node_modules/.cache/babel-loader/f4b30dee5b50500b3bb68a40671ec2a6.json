{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url, headers = {}, fetch) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id, options = {\n    public: false\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/packages/StorageBucketApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = {\n        public: false,\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map"]},"metadata":{},"sourceType":"module"}