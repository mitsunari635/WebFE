{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq(column, value) {\n    this.url.searchParams.append(column, `eq.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  neq(column, value) {\n    this.url.searchParams.append(column, `neq.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  gt(column, value) {\n    this.url.searchParams.append(column, `gt.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  gte(column, value) {\n    this.url.searchParams.append(column, `gte.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  lt(column, value) {\n    this.url.searchParams.append(column, `lt.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  lte(column, value) {\n    this.url.searchParams.append(column, `lte.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n\n\n  like(column, pattern) {\n    this.url.searchParams.append(column, `like.${pattern}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n\n\n  likeAllOf(column, patterns) {\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n\n\n  likeAnyOf(column, patterns) {\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(column, `ilike.${pattern}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n\n\n  ilikeAllOf(column, patterns) {\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n\n\n  ilikeAnyOf(column, patterns) {\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  is(column, value) {\n    this.url.searchParams.append(column, `is.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n\n\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(column, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(column, `sr.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(column, `nxl.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(column, `sl.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(column, `nxr.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(column, `adj.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n\n\n  textSearch(column, query, {\n    config,\n    type\n  } = {}) {\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n\n\n  match(query) {\n    Object.entries(query).forEach(([column, value]) => {\n      this.url.searchParams.append(column, `eq.${value}`);\n    });\n    return this;\n  }\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n\n\n  not(column, operator, value) {\n    this.url.searchParams.append(column, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n\n\n  or(filters, {\n    foreignTable\n  } = {}) {\n    const key = foreignTable ? `${foreignTable}.or` : 'or';\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(column, `${operator}.${value}`);\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../src/PostgrestFilterBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n    /**\n     * Match only rows where `column` is equal to `value`.\n     *\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    eq(column, value) {\n        this.url.searchParams.append(column, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is not equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    neq(column, value) {\n        this.url.searchParams.append(column, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gt(column, value) {\n        this.url.searchParams.append(column, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gte(column, value) {\n        this.url.searchParams.append(column, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lt(column, value) {\n        this.url.searchParams.append(column, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lte(column, value) {\n        this.url.searchParams.append(column, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(column, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(column, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` IS `value`.\n     *\n     * For non-boolean columns, this is only relevant for checking if the value of\n     * `column` is NULL by setting `value` to `null`.\n     *\n     * For boolean columns, you can also set `value` to `true` or `false` and it\n     * will behave the same way as `.eq()`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    is(column, value) {\n        this.url.searchParams.append(column, `is.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is included in the `values` array.\n     *\n     * @param column - The column to filter on\n     * @param values - The values array to filter with\n     */\n    in(column, values) {\n        const cleanedValues = values\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * `column` contains every element appearing in `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(column, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * every element appearing in `column` is contained by `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is greater than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(column, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or greater than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(column, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is less than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(column, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or less than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(column, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where `column` is\n     * mutually exclusive to `range` and there can be no element between the two\n     * ranges.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(column, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for array and range columns. Match only rows where\n     * `column` and `value` have an element in common.\n     *\n     * @param column - The array or range column to filter on\n     * @param value - The array or range value to filter with\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for text and tsvector columns. Match only rows where\n     * `column` matches the query string in `query`.\n     *\n     * @param column - The text or tsvector column to filter on\n     * @param query - The query text to match with\n     * @param options - Named parameters\n     * @param options.config - The text search configuration to use\n     * @param options.type - Change how the `query` text is interpreted\n     */\n    textSearch(column, query, { config, type } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Match only rows where each column in `query` keys is equal to its\n     * associated value. Shorthand for multiple `.eq()`s.\n     *\n     * @param query - The object to filter with, with column names as keys mapped\n     * to their filter values\n     */\n    match(query) {\n        Object.entries(query).forEach(([column, value]) => {\n            this.url.searchParams.append(column, `eq.${value}`);\n        });\n        return this;\n    }\n    /**\n     * Match only rows which doesn't satisfy the filter.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to be negated to filter with, following\n     * PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy at least one of the filters.\n     *\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure it's properly sanitized.\n     *\n     * It's currently not possible to do an `.or()` filter across multiple tables.\n     *\n     * @param filters - The filters to use, following PostgREST syntax\n     * @param foreignTable - Set this to filter on foreign tables instead of the\n     * current table\n     */\n    or(filters, { foreignTable } = {}) {\n        const key = foreignTable ? `${foreignTable}.or` : 'or';\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy the filter. This is an escape hatch - you\n     * should use the specific filter methods wherever possible.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to filter with, following PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(column, `${operator}.${value}`);\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestFilterBuilder.js.map"]},"metadata":{},"sourceType":"module"}