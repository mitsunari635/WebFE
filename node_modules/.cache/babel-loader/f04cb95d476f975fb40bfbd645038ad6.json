{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\n\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n\n    this.channel._on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel._joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n\n    this.channel._on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences\n      });\n    });\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences\n      });\n    });\n    this.onSync(() => {\n      this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n\n\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(m => m.presence_ref);\n        const curPresenceRefs = currentPresences.map(m => m.presence_ref);\n        const joinedPresences = newPresences.filter(m => curPresenceRefs.indexOf(m.presence_ref) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceRefs.indexOf(m.presence_ref) < 0);\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n\n\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n\n    this.map(joins, (key, newPresences) => {\n      var _a;\n\n      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n      state[key] = this.cloneDeep(newPresences);\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(m => m.presence_ref);\n        const curPresences = currentPresences.filter(m => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n        state[key].unshift(...curPresences);\n      }\n\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceRefsToRemove = leftPresences.map(m => m.presence_ref);\n      currentPresences = currentPresences.filter(m => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /** @internal */\n\n\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n\n\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_ref'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n\n      return newState;\n    }, {});\n  }\n  /** @internal */\n\n\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  /** @internal */\n\n\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n  /** @internal */\n\n\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n  /** @internal */\n\n\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n  /** @internal */\n\n\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef();\n  }\n\n}","map":{"version":3,"sources":["../../src/RealtimePresence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map"]},"metadata":{},"sourceType":"module"}