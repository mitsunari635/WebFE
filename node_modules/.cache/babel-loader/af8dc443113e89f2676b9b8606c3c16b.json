{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\n\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schemaName = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n\n\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schemaName,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n\n\n  schema(schema) {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n\n\n  rpc(fn, args = {}, {\n    head = false,\n    count\n  } = {}) {\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(([name, value]) => {\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n\n    const headers = Object.assign({}, this.headers);\n\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/PostgrestClient.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAP,MAAkC,yBAAlC;AACA,OAAO,sBAAP,MAAmC,0BAAnC;AAEA,SAAS,eAAT,QAAgC,aAAhC;AAGA;;;;;;;;;AASG;;AACH,eAAc,MAAO,eAAP,CAAsB;AAclC;;AACA;;;;;;;;AAQG;AACH,EAAA,WAAA,CACE,GADF,EAEE;AACE,IAAA,OAAO,GAAG,EADZ;AAEE,IAAA,MAFF;AAGE,IAAA;AAHF,MAQI,EAVN,EAUQ;AAEN,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,OAA5B,CAAZ;AACA,SAAK,UAAL,GAAkB,MAAlB;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AAUD;;;;AAIG;;;AACH,EAAA,IAAI,CAAC,QAAD,EAAiB;AACnB,UAAM,GAAG,GAAG,IAAI,GAAJ,CAAQ,GAAG,KAAK,GAAG,IAAI,QAAQ,EAA/B,CAAZ;AACA,WAAO,IAAI,qBAAJ,CAAuC,GAAvC,EAA4C;AACjD,MAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,OAAZ,CAD0C;AAEjD,MAAA,MAAM,EAAE,KAAK,UAFoC;AAGjD,MAAA,KAAK,EAAE,KAAK;AAHqC,KAA5C,CAAP;AAKD;AAED;;;;;;AAMG;;;AACH,EAAA,MAAM,CACJ,MADI,EACiB;AAMrB,WAAO,IAAI,eAAJ,CAIL,KAAK,GAJA,EAIK;AACV,MAAA,OAAO,EAAE,KAAK,OADJ;AAEV,MAAA,MAFU;AAGV,MAAA,KAAK,EAAE,KAAK;AAHF,KAJL,CAAP;AASD;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;;;AACH,EAAA,GAAG,CAID,EAJC,EAKD,IAAA,GAA0B,EALzB,EAMD;AACE,IAAA,IAAI,GAAG,KADT;AAEE,IAAA;AAFF,MAMI,EAZH,EAYK;AAUN,QAAI,MAAJ;AACA,UAAM,GAAG,GAAG,IAAI,GAAJ,CAAQ,GAAG,KAAK,GAAG,QAAQ,EAAE,EAA7B,CAAZ;AACA,QAAI,IAAJ;;AACA,QAAI,IAAJ,EAAU;AACR,MAAA,MAAM,GAAG,MAAT;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,OAArB,CAA6B,CAAC,CAAC,IAAD,EAAO,KAAP,CAAD,KAAkB;AAC7C,QAAA,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAwB,IAAxB,EAA8B,GAAG,KAAK,EAAtC;AACD,OAFD;AAGD,KALD,MAKO;AACL,MAAA,MAAM,GAAG,MAAT;AACA,MAAA,IAAI,GAAG,IAAP;AACD;;AAED,UAAM,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,KAAK,OAAb,CAAb;;AACA,QAAI,KAAJ,EAAW;AACT,MAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,SAAS,KAAK,EAAlC;AACD;;AAED,WAAO,IAAI,sBAAJ,CAA2B;AAChC,MAAA,MADgC;AAEhC,MAAA,GAFgC;AAGhC,MAAA,OAHgC;AAIhC,MAAA,MAAM,EAAE,KAAK,UAJmB;AAKhC,MAAA,IALgC;AAMhC,MAAA,KAAK,EAAE,KAAK,KANoB;AAOhC,MAAA,UAAU,EAAE;AAPoB,KAA3B,CAAP;AASD;;AA/JiC","sourceRoot":"","sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schemaName = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schemaName,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return new PostgrestClient(this.url, {\n            headers: this.headers,\n            schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head) {\n            method = 'HEAD';\n            Object.entries(args).forEach(([name, value]) => {\n                url.searchParams.append(name, `${value}`);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url,\n            headers,\n            schema: this.schemaName,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\n//# sourceMappingURL=PostgrestClient.js.map"]},"metadata":{},"sourceType":"module"}