{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport const resolveFetch = customFetch => {\n  let _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) => import('@supabase/node-fetch').then(({\n      default: fetch\n    }) => fetch(...args));\n  } else {\n    _fetch = fetch;\n  }\n\n  return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (yield import('@supabase/node-fetch')).Response;\n  }\n\n  return Response;\n});","map":{"version":3,"sources":["../../../src/lib/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,MAAM,YAAY,GAAI,WAAD,IAA+B;AACzD,MAAI,MAAJ;;AACA,MAAI,WAAJ,EAAiB;AACf,IAAA,MAAM,GAAG,WAAT;AACD,GAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AACvC,IAAA,MAAM,GAAG,CAAC,GAAG,IAAJ,KACP,OAAO,sBAAP,EAAsC,IAAtC,CAA2C,CAAC;AAAE,MAAA,OAAO,EAAE;AAAX,KAAD,KAAwB,KAAK,CAAC,GAAG,IAAJ,CAAxE,CADF;AAED,GAHM,MAGA;AACL,IAAA,MAAM,GAAG,KAAT;AACD;;AACD,SAAO,CAAC,GAAG,IAAJ,KAAa,MAAM,CAAC,GAAG,IAAJ,CAA1B;AACD,CAXM;AAaP,OAAO,MAAM,eAAe,GAAG,MAAqC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClE,MAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC;AACnC;AACA,WAAO,CAAC,MAAM,OAAO,sBAAP,CAAP,EAA8C,QAArD;AACD;;AAED,SAAO,QAAP;AACD,CAPmE,CAA7D","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n        // @ts-ignore\n        return (yield import('@supabase/node-fetch')).Response;\n    }\n    return Response;\n});\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}