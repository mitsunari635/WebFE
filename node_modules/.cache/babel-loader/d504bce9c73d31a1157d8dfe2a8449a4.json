{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { createNewBannerFunc, getAllBanner, deleteBannerFunc, editBannerFunc, getAllBannerPageService } from \"../../services/bannerService\";\nimport { toast } from \"react-toastify\";\nimport { update } from \"lodash\";\nexport const createNewBanner = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewBannerFunc(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Tạo banner thành công\");\n        dispatch(saveBannerSuccess());\n        dispatch(fetchAllBannerStart());\n      } else {\n        dispatch(saveBannerFailed());\n      }\n    } catch (e) {\n      dispatch(saveBannerFailed());\n      console.log(\"saveBannerFailed error\", e);\n    }\n  };\n};\nexport const saveBannerSuccess = () => ({\n  type: actionTypes.CREATE_BANNER_SUCCESS\n});\nexport const saveBannerFailed = () => ({\n  type: actionTypes.CREATE_BANNER_FAILED\n});\nexport const fetchAllBannerStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllBanner(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllBannerSuccess(res.banners));\n      } else {\n        toast.error(\"Lấy banner thất bại\");\n        dispatch(fetchAllBannerFailed());\n      }\n    } catch (e) {\n      toast.error(\"Lấy banner thất bại\");\n      dispatch(fetchAllBannerFailed());\n      console.log(\"fetchAllBannerFailed error\", e);\n    }\n  };\n};\nexport const fetchAllBannerSuccess = data => ({\n  type: actionTypes.FETCH_ALL_BANNER_SUCCESS,\n  banners: data\n});\nexport const fetchAllBannerFailed = () => ({\n  type: actionTypes.FETCH_ALL_BANNER_FAILED\n});\nexport const deleteBanner = bannerId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteBannerFunc(bannerId);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Xóa banner thành công\");\n        dispatch(deleteBannerSuccess());\n        dispatch(fetchAllBannerStart());\n      } else {\n        toast.error(\"Xóa banner thất bại\");\n        dispatch(deleteBannerFailed());\n      }\n    } catch (e) {\n      dispatch(deleteBannerFailed());\n      console.log(\"deleteBannerFailed error\", e);\n    }\n  };\n};\nexport const deleteBannerSuccess = () => ({\n  type: actionTypes.DELETE_BANNER_SUCCESS\n});\nexport const deleteBannerFailed = () => ({\n  type: actionTypes.DELETE_BANNER_FAILED\n});\nexport const editBanner = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editBannerFunc(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Cập nhật banner thành công\");\n        dispatch(editBannerSuccess());\n        dispatch(fetchAllBannerStart());\n      } else {\n        toast.error(\"Cập nhật banner thất bại\");\n        dispatch(editBannerFailed());\n      }\n    } catch (e) {\n      toast.error(\"Cập nhật banner thất bại\");\n      dispatch(editBannerFailed());\n      console.log(\"editBannerFailed error\", e);\n    }\n  };\n};\nexport const editBannerSuccess = () => ({\n  type: actionTypes.EDIT_BANNER_SUCCESS\n});\nexport const editBannerFailed = () => ({\n  type: actionTypes.EDIT_BANNER_FAILED\n});\nexport const fetchAllBannerPage = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllBannerPageService(\"\");\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_BANNER_PAGE_SUCCESS,\n          dataAllBanner: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_BANNER_PAGE_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"Fetch all Banner failed: \", e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_BANNER_PAGE_FAILED\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/LienSon/LienSon-FE/src/store/actions/bannerActions.js"],"names":["actionTypes","createNewBannerFunc","getAllBanner","deleteBannerFunc","editBannerFunc","getAllBannerPageService","toast","update","createNewBanner","data","dispatch","getState","res","errCode","success","saveBannerSuccess","fetchAllBannerStart","saveBannerFailed","e","console","log","type","CREATE_BANNER_SUCCESS","CREATE_BANNER_FAILED","fetchAllBannerSuccess","banners","error","fetchAllBannerFailed","FETCH_ALL_BANNER_SUCCESS","FETCH_ALL_BANNER_FAILED","deleteBanner","bannerId","deleteBannerSuccess","deleteBannerFailed","DELETE_BANNER_SUCCESS","DELETE_BANNER_FAILED","editBanner","editBannerSuccess","editBannerFailed","EDIT_BANNER_SUCCESS","EDIT_BANNER_FAILED","fetchAllBannerPage","FETCH_ALL_BANNER_PAGE_SUCCESS","dataAllBanner","FETCH_ALL_BANNER_PAGE_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport {\r\n  createNewBannerFunc,\r\n  getAllBanner,\r\n  deleteBannerFunc,\r\n  editBannerFunc,\r\n  getAllBannerPageService,\r\n} from \"../../services/bannerService\";\r\nimport { toast } from \"react-toastify\";\r\nimport { update } from \"lodash\";\r\n\r\nexport const createNewBanner = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewBannerFunc(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Tạo banner thành công\");\r\n        dispatch(saveBannerSuccess());\r\n        dispatch(fetchAllBannerStart());\r\n      } else {\r\n        dispatch(saveBannerFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(saveBannerFailed());\r\n      console.log(\"saveBannerFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveBannerSuccess = () => ({\r\n  type: actionTypes.CREATE_BANNER_SUCCESS,\r\n});\r\n\r\nexport const saveBannerFailed = () => ({\r\n  type: actionTypes.CREATE_BANNER_FAILED,\r\n});\r\n\r\nexport const fetchAllBannerStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllBanner(\"ALL\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchAllBannerSuccess(res.banners));\r\n      } else {\r\n        toast.error(\"Lấy banner thất bại\");\r\n        dispatch(fetchAllBannerFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Lấy banner thất bại\");\r\n      dispatch(fetchAllBannerFailed());\r\n      console.log(\"fetchAllBannerFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllBannerSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_BANNER_SUCCESS,\r\n  banners: data,\r\n});\r\n\r\nexport const fetchAllBannerFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_BANNER_FAILED,\r\n});\r\n\r\nexport const deleteBanner = (bannerId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteBannerFunc(bannerId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Xóa banner thành công\");\r\n        dispatch(deleteBannerSuccess());\r\n        dispatch(fetchAllBannerStart());\r\n      } else {\r\n        toast.error(\"Xóa banner thất bại\");\r\n        dispatch(deleteBannerFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(deleteBannerFailed());\r\n      console.log(\"deleteBannerFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteBannerSuccess = () => ({\r\n  type: actionTypes.DELETE_BANNER_SUCCESS,\r\n});\r\n\r\nexport const deleteBannerFailed = () => ({\r\n  type: actionTypes.DELETE_BANNER_FAILED,\r\n});\r\n\r\nexport const editBanner = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editBannerFunc(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Cập nhật banner thành công\");\r\n        dispatch(editBannerSuccess());\r\n        dispatch(fetchAllBannerStart());\r\n      } else {\r\n        toast.error(\"Cập nhật banner thất bại\");\r\n        dispatch(editBannerFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Cập nhật banner thất bại\");\r\n      dispatch(editBannerFailed());\r\n      console.log(\"editBannerFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editBannerSuccess = () => ({\r\n  type: actionTypes.EDIT_BANNER_SUCCESS,\r\n});\r\n\r\nexport const editBannerFailed = () => ({\r\n  type: actionTypes.EDIT_BANNER_FAILED,\r\n});\r\n\r\nexport const fetchAllBannerPage = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllBannerPageService(\"\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_BANNER_PAGE_SUCCESS,\r\n          dataAllBanner: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_BANNER_PAGE_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Fetch all Banner failed: \", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_BANNER_PAGE_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}