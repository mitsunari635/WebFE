{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { deleteOrder, getDetailOrder, getOrder, getUserByOrderNumber, editOrderStatus, checkNewOrder } from \"../../services/orderService\";\nimport { toast } from \"react-toastify\";\nimport { getAllCodeService } from \"../../services/productService\";\nexport const fetchOrderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getOrder(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchOrderSuccess(res.orders));\n      } else {\n        toast.error(\"Lấy đơn hàng thất bại\");\n        dispatch(fetchOrderFailed());\n      }\n    } catch (e) {\n      toast.error(\"Lấy đơn hàng thất bại\");\n      dispatch(fetchOrderFailed());\n      console.log(\"fetchOrderFailed error:\", e);\n    }\n  };\n};\nexport const fetchOrderSuccess = data => (dispatch, getState) => {\n  dispatch({\n    type: actionTypes.FETCH_ORDER_SUCCESS,\n    orders: data\n  }); // Trigger a new order fetch immediately after successful order retrieval\n\n  const isNewOrder = checkNewOrder(); // Assuming checkNewOrder returns a boolean\n  // if (isNewOrder) {\n  //   dispatch(handleCheckNewOrder());\n  // }\n};\nexport const fetchOrderFailed = () => ({\n  type: actionTypes.FETCH_ORDER_FAILED\n});\nexport const deleteOrderStart = orderInfo => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteOrder(orderInfo);\n      console.log(res);\n\n      if (res && res.errCode === 0) {\n        dispatch(deleteOrderSuccess(res.orders));\n        toast.success(\"Xóa thành công\");\n        dispatch(fetchOrderStart());\n      } else {\n        toast.error(\"Lấy đơn hàng thất bại\");\n        dispatch(deleteOrderFailed());\n      }\n    } catch (e) {\n      toast.success(\"Lấy đơn hàng thất bại\");\n      dispatch(fetchOrderFailed());\n      console.log(\"fetchOrderFailed error:\", e);\n    }\n  };\n};\nexport const deleteOrderSuccess = data => ({\n  type: actionTypes.DELETE_ORDER_SUCCESS\n});\nexport const deleteOrderFailed = () => ({\n  type: actionTypes.DELETE_ORDER_FAILED\n});\nexport const detailByNumber = orderNumber => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getDetailOrder(orderNumber);\n\n      if (res && res.errCode === 0) {\n        dispatch(detailByNumberSuccess(res.data));\n      } else {\n        toast.success(\"Lấy đơn hàng thất bại\");\n        dispatch(detailByNumberFailed());\n      }\n    } catch (e) {\n      toast.success(\"Lấy đơn hàng thất bại\");\n      dispatch(detailByNumberFailed());\n      console.log(\"fetchOrderFailed error:\", e);\n    }\n  };\n};\nexport const detailByNumberSuccess = data => ({\n  type: actionTypes.DETAIL_BY_ORDER_SUCCESS,\n  detail: data\n});\nexport const detailByNumberFailed = () => ({\n  type: actionTypes.DETAIL_BY_ORDER_FAILED\n});\nexport const UserByNumberStart = orderNumber => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getUserByOrderNumber(orderNumber);\n\n      if (res && res.errCode === 0) {\n        dispatch(userByNumberSuccess(res.user));\n      } else {\n        toast.success(\"Lấy đơn hàng thất bại\");\n        dispatch(userByNumberFailed());\n      }\n    } catch (e) {\n      toast.success(\"Lấy đơn hàng thất bại\");\n      dispatch(userByNumberFailed());\n      console.log(\"fetchOrderFailed error:\", e);\n    }\n  };\n};\n_c = UserByNumberStart;\nexport const userByNumberSuccess = data => ({\n  type: actionTypes.USER_BY_NUM_SUCCESS,\n  user: data\n});\nexport const userByNumberFailed = () => ({\n  type: actionTypes.USER_BY_NUM_FAILED\n});\nexport const fetchStatusStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"STATUS\"); // console.log(res)\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchStatusSuccess(res.data));\n      } else {\n        dispatch(fetchStatusFailed());\n      }\n    } catch (e) {\n      dispatch(fetchStatusFailed());\n      console.log(\"fetchStatusStart error\", e);\n    }\n  };\n};\nexport const fetchStatusSuccess = statusData => ({\n  type: actionTypes.FETCH_STATUS_SUCCESS,\n  data: statusData\n});\nexport const fetchStatusFailed = () => ({\n  type: actionTypes.FETCH_STATUS_FAILED\n});\nexport const editOrderStatusFunc = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editOrderStatus(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Cập nhật trạng thái thành công\");\n        dispatch(editOrderStatusSuccess(data));\n        dispatch(fetchStatusStart());\n      } else {\n        toast.error(\"Cập nhật trạng thái thất bại\");\n        dispatch(editOrderStatusFailed());\n      }\n    } catch (e) {\n      toast.error(\"Cập nhật trạng thái thất bại\");\n      dispatch(editOrderStatusFailed());\n      console.log(\"editProductFailed error\", e);\n    }\n  };\n};\nexport const editOrderStatusSuccess = data => ({\n  type: actionTypes.EDIT_ORDER_STATUS_SUCCESS,\n  payload: data\n});\nexport const editOrderStatusFailed = () => ({\n  type: actionTypes.EDIT_ORDER_STATUS_FAILED\n});\nexport const handleCheckNewOrder = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await checkNewOrder();\n\n      if (res && res.errCode === 0) {\n        dispatch(checkNewOrderSuccess(res.data));\n      } else {\n        dispatch(checkNewOrderFail());\n      }\n    } catch (e) {\n      toast.error(\"Cập nhật trạng thái thất bại\");\n      dispatch(checkNewOrderFail());\n      console.log(\"editProductFailed error\", e);\n    }\n  };\n};\nexport const checkNewOrderSuccess = data => ({\n  type: actionTypes.CHECK_NEW_ORDER_SUCCESS,\n  payload: data\n});\nexport const checkNewOrderFail = () => ({\n  type: actionTypes.CHECK_NEW_ORDER_FAIL\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"UserByNumberStart\");","map":{"version":3,"sources":["D:/LienSon/LienSon-FE/src/store/actions/orderActions.js"],"names":["actionTypes","deleteOrder","getDetailOrder","getOrder","getUserByOrderNumber","editOrderStatus","checkNewOrder","toast","getAllCodeService","fetchOrderStart","dispatch","getState","res","errCode","fetchOrderSuccess","orders","error","fetchOrderFailed","e","console","log","data","type","FETCH_ORDER_SUCCESS","isNewOrder","FETCH_ORDER_FAILED","deleteOrderStart","orderInfo","deleteOrderSuccess","success","deleteOrderFailed","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAILED","detailByNumber","orderNumber","detailByNumberSuccess","detailByNumberFailed","DETAIL_BY_ORDER_SUCCESS","detail","DETAIL_BY_ORDER_FAILED","UserByNumberStart","userByNumberSuccess","user","userByNumberFailed","USER_BY_NUM_SUCCESS","USER_BY_NUM_FAILED","fetchStatusStart","fetchStatusSuccess","fetchStatusFailed","statusData","FETCH_STATUS_SUCCESS","FETCH_STATUS_FAILED","editOrderStatusFunc","editOrderStatusSuccess","editOrderStatusFailed","EDIT_ORDER_STATUS_SUCCESS","payload","EDIT_ORDER_STATUS_FAILED","handleCheckNewOrder","checkNewOrderSuccess","checkNewOrderFail","CHECK_NEW_ORDER_SUCCESS","CHECK_NEW_ORDER_FAIL"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport {\r\n  deleteOrder,\r\n  getDetailOrder,\r\n  getOrder,\r\n  getUserByOrderNumber,\r\n  editOrderStatus,\r\n  checkNewOrder,\r\n} from \"../../services/orderService\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getAllCodeService } from \"../../services/productService\";\r\n\r\nexport const fetchOrderStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getOrder(\"ALL\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchOrderSuccess(res.orders));\r\n      } else {\r\n        toast.error(\"Lấy đơn hàng thất bại\");\r\n        dispatch(fetchOrderFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Lấy đơn hàng thất bại\");\r\n      dispatch(fetchOrderFailed());\r\n      console.log(\"fetchOrderFailed error:\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchOrderSuccess = (data) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: actionTypes.FETCH_ORDER_SUCCESS,\r\n    orders: data,\r\n  });\r\n\r\n  // Trigger a new order fetch immediately after successful order retrieval\r\n  const isNewOrder = checkNewOrder(); // Assuming checkNewOrder returns a boolean\r\n  // if (isNewOrder) {\r\n  //   dispatch(handleCheckNewOrder());\r\n  // }\r\n};\r\n\r\nexport const fetchOrderFailed = () => ({\r\n  type: actionTypes.FETCH_ORDER_FAILED,\r\n});\r\n\r\nexport const deleteOrderStart = (orderInfo) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteOrder(orderInfo);\r\n      console.log(res);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(deleteOrderSuccess(res.orders));\r\n        toast.success(\"Xóa thành công\");\r\n        dispatch(fetchOrderStart());\r\n      } else {\r\n        toast.error(\"Lấy đơn hàng thất bại\");\r\n        dispatch(deleteOrderFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.success(\"Lấy đơn hàng thất bại\");\r\n      dispatch(fetchOrderFailed());\r\n      console.log(\"fetchOrderFailed error:\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteOrderSuccess = (data) => ({\r\n  type: actionTypes.DELETE_ORDER_SUCCESS,\r\n});\r\n\r\nexport const deleteOrderFailed = () => ({\r\n  type: actionTypes.DELETE_ORDER_FAILED,\r\n});\r\n\r\nexport const detailByNumber = (orderNumber) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getDetailOrder(orderNumber);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(detailByNumberSuccess(res.data));\r\n      } else {\r\n        toast.success(\"Lấy đơn hàng thất bại\");\r\n        dispatch(detailByNumberFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.success(\"Lấy đơn hàng thất bại\");\r\n      dispatch(detailByNumberFailed());\r\n      console.log(\"fetchOrderFailed error:\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const detailByNumberSuccess = (data) => ({\r\n  type: actionTypes.DETAIL_BY_ORDER_SUCCESS,\r\n  detail: data,\r\n});\r\n\r\nexport const detailByNumberFailed = () => ({\r\n  type: actionTypes.DETAIL_BY_ORDER_FAILED,\r\n});\r\n\r\nexport const UserByNumberStart = (orderNumber) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getUserByOrderNumber(orderNumber);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(userByNumberSuccess(res.user));\r\n      } else {\r\n        toast.success(\"Lấy đơn hàng thất bại\");\r\n        dispatch(userByNumberFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.success(\"Lấy đơn hàng thất bại\");\r\n      dispatch(userByNumberFailed());\r\n      console.log(\"fetchOrderFailed error:\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const userByNumberSuccess = (data) => ({\r\n  type: actionTypes.USER_BY_NUM_SUCCESS,\r\n  user: data,\r\n});\r\n\r\nexport const userByNumberFailed = () => ({\r\n  type: actionTypes.USER_BY_NUM_FAILED,\r\n});\r\n\r\nexport const fetchStatusStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"STATUS\");\r\n      // console.log(res)\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchStatusSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchStatusFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchStatusFailed());\r\n      console.log(\"fetchStatusStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchStatusSuccess = (statusData) => ({\r\n  type: actionTypes.FETCH_STATUS_SUCCESS,\r\n  data: statusData,\r\n});\r\n\r\nexport const fetchStatusFailed = () => ({\r\n  type: actionTypes.FETCH_STATUS_FAILED,\r\n});\r\n\r\nexport const editOrderStatusFunc = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editOrderStatus(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Cập nhật trạng thái thành công\");\r\n        dispatch(editOrderStatusSuccess(data));\r\n        dispatch(fetchStatusStart());\r\n      } else {\r\n        toast.error(\"Cập nhật trạng thái thất bại\");\r\n        dispatch(editOrderStatusFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Cập nhật trạng thái thất bại\");\r\n      dispatch(editOrderStatusFailed());\r\n      console.log(\"editProductFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editOrderStatusSuccess = (data) => ({\r\n  type: actionTypes.EDIT_ORDER_STATUS_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const editOrderStatusFailed = () => ({\r\n  type: actionTypes.EDIT_ORDER_STATUS_FAILED,\r\n});\r\n\r\nexport const handleCheckNewOrder = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await checkNewOrder();\r\n      if (res && res.errCode === 0) {\r\n        dispatch(checkNewOrderSuccess(res.data));\r\n      } else {\r\n        dispatch(checkNewOrderFail());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Cập nhật trạng thái thất bại\");\r\n      dispatch(checkNewOrderFail());\r\n      console.log(\"editProductFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const checkNewOrderSuccess = (data) => ({\r\n  type: actionTypes.CHECK_NEW_ORDER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const checkNewOrderFail = () => ({\r\n  type: actionTypes.CHECK_NEW_ORDER_FAIL,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}