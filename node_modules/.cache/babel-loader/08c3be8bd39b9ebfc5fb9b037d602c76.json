{"ast":null,"code":"// Copied from https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/table.js\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n\n  return false;\n}\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n  ch = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60\n    /* ` */\n    ) {\n        if (backTicked) {\n          // make \\` close code sequence, but not open it;\n          // the reason is: `\\` is correct code block\n          backTicked = false;\n          lastBackTick = pos;\n        } else if (escapes % 2 === 0) {\n          backTicked = true;\n          lastBackTick = pos;\n        }\n      } else if (ch === 0x7c\n    /* | */\n    && escapes % 2 === 0 && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c\n    /* \\ */\n    ) {\n        escapes++;\n      } else {\n      escapes = 0;\n    }\n\n    pos++; // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n  return result;\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines; // should have at least two lines\n\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  } // if it's indented more than 3 spaces, it should be a code block\n\n\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  } // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch !== 0x7c\n  /* | */\n  && ch !== 0x2d\n  /* - */\n  && ch !== 0x3a\n  /* : */\n  ) {\n      return false;\n    }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7c\n    /* | */\n    && ch !== 0x2d\n    /* - */\n    && ch !== 0x3a\n    /* : */\n    && !isSpace(ch)) {\n      return false;\n    }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n  columns = lineText.split('|');\n  aligns = [];\n\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n\n    if (t.charCodeAt(t.length - 1) === 0x3a\n    /* : */\n    ) {\n        aligns.push(t.charCodeAt(0) === 0x3a\n        /* : */\n        ? 'center' : 'right');\n      } else if (t.charCodeAt(0) === 0x3a\n    /* : */\n    ) {\n        aligns.push('left');\n      } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, '')); // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n\n  columnCount = columns.length;\n\n  if (columnCount > aligns.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  token = state.push('table_open', 'table', 1);\n  token.map = tableLines = [startLine, 0]; // token     = state.push('thead_open', 'thead', 1);\n  // token.map = [ startLine, startLine + 1 ];\n\n  token = state.push('tr_open', 'tr', 1);\n  token.map = [startLine, startLine + 1];\n\n  for (i = 0; i < columns.length; i++) {\n    token = state.push('th_open', 'th', 1);\n    token.map = [startLine, startLine + 1];\n\n    if (aligns[i]) {\n      token.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n\n    token = state.push('paragraph_open', 'p', 1);\n    token = state.push('inline', '', 0);\n    token.content = columns[i].trim();\n    token.map = [startLine, startLine + 1];\n    token.children = [];\n    token = state.push('paragraph_close', 'p', -1);\n    token = state.push('th_close', 'th', -1);\n  }\n\n  token = state.push('tr_close', 'tr', -1); // token     = state.push('thead_close', 'thead', -1);\n  // token     = state.push('tbody_open', 'tbody', 1);\n\n  token.map = tbodyLines = [startLine + 2, 0];\n  var oldLineMax = state.lineMax;\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n\n    if (lineText.indexOf('|') === -1) {\n      break;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n    token = state.push('tr_open', 'tr', 1);\n\n    for (var _i = 0, offset = 1; _i < columns.length; _i++) {\n      token = state.push('td_open', 'td', 1);\n\n      if (aligns[_i]) {\n        token.attrs = [['style', 'text-align:' + aligns[_i]]];\n      } // https://github.com/markdown-it/markdown-it/blob/e6f19eab4204122e85e4a342e0c1c8486ff40c2d/lib/rules_block/state_block.js#L25\n      // bMarks => line begin offsets for fast jumps\n      // eMarks => line end offsets for fast jumps\n      // tShift => offsets of the first non-space characters (tabs not expanded)\n      // sCount => indents for each line (tabs expanded)\n      // Move bMarks when first char is ' ' for > to work\n\n\n      var shift = columns[_i][0] === ' ' || /^(\\d+\\.|\\*|-)$/.test(columns[_i].trim()) ? 1 : 0;\n      state.bMarks[nextLine] += offset + shift;\n      offset = (columns[_i] || '').length + (shift ? 0 : 1);\n      state.eMarks[nextLine] = state.bMarks[nextLine] + offset - 1;\n      state.lineMax = 1;\n      state.md.block.tokenize(state, nextLine, nextLine + 1);\n      token = state.push('td_close', 'td', -1);\n    }\n\n    token = state.push('tr_close', 'tr', -1);\n  } // token = state.push('tbody_close', 'tbody', -1);\n\n\n  state.lineMax = oldLineMax;\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};","map":{"version":3,"sources":["D:/LienSon/LienSon-FE/node_modules/markdown-it-table/dist/es/table.js"],"names":["isSpace","code","getLine","state","line","pos","bMarks","blkIndent","max","eMarks","src","substr","escapedSplit","str","result","length","ch","escapes","lastPos","backTicked","lastBackTick","charCodeAt","push","substring","module","exports","table","startLine","endLine","silent","lineText","i","nextLine","columns","columnCount","token","aligns","t","tableLines","tbodyLines","sCount","tShift","split","trim","test","indexOf","replace","map","attrs","content","children","oldLineMax","lineMax","_i","offset","shift","md","block","tokenize"],"mappings":"AAAA;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,UAAQA,IAAR;AACE,SAAK,IAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;AAHJ;;AAKA,SAAO,KAAP;AACD;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAC5B,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAaF,IAAb,IAAqBD,KAAK,CAACI,SAArC;AAAA,MACIC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAaL,IAAb,CADV;AAGA,SAAOD,KAAK,CAACO,GAAN,CAAUC,MAAV,CAAiBN,GAAjB,EAAsBG,GAAG,GAAGH,GAA5B,CAAP;AACD;;AAED,SAASO,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,MAAIC,MAAM,GAAG,EAAb;AAAA,MACIT,GAAG,GAAG,CADV;AAAA,MAEIG,GAAG,GAAGK,GAAG,CAACE,MAFd;AAAA,MAGIC,EAHJ;AAAA,MAIIC,OAAO,GAAG,CAJd;AAAA,MAKIC,OAAO,GAAG,CALd;AAAA,MAMIC,UAAU,GAAG,KANjB;AAAA,MAOIC,YAAY,GAAG,CAPnB;AASAJ,EAAAA,EAAE,GAAGH,GAAG,CAACQ,UAAJ,CAAehB,GAAf,CAAL;;AAEA,SAAOA,GAAG,GAAGG,GAAb,EAAkB;AAChB,QAAIQ,EAAE,KAAK;AAAK;AAAhB,MAAyB;AACrB,YAAIG,UAAJ,EAAgB;AACd;AACA;AACAA,UAAAA,UAAU,GAAG,KAAb;AACAC,UAAAA,YAAY,GAAGf,GAAf;AACD,SALD,MAKO,IAAIY,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;AAC5BE,UAAAA,UAAU,GAAG,IAAb;AACAC,UAAAA,YAAY,GAAGf,GAAf;AACD;AACF,OAVH,MAUS,IAAIW,EAAE,KAAK;AAAK;AAAZ,OAAuBC,OAAO,GAAG,CAAV,KAAgB,CAAvC,IAA4C,CAACE,UAAjD,EAA6D;AACpEL,MAAAA,MAAM,CAACQ,IAAP,CAAYT,GAAG,CAACU,SAAJ,CAAcL,OAAd,EAAuBb,GAAvB,CAAZ;AACAa,MAAAA,OAAO,GAAGb,GAAG,GAAG,CAAhB;AACD;;AAED,QAAIW,EAAE,KAAK;AAAK;AAAhB,MAAyB;AACrBC,QAAAA,OAAO;AACR,OAFH,MAES;AACPA,MAAAA,OAAO,GAAG,CAAV;AACD;;AAEDZ,IAAAA,GAAG,GAtBa,CAwBhB;AACA;;AACA,QAAIA,GAAG,KAAKG,GAAR,IAAeW,UAAnB,EAA+B;AAC7BA,MAAAA,UAAU,GAAG,KAAb;AACAd,MAAAA,GAAG,GAAGe,YAAY,GAAG,CAArB;AACD;;AAEDJ,IAAAA,EAAE,GAAGH,GAAG,CAACQ,UAAJ,CAAehB,GAAf,CAAL;AACD;;AAEDS,EAAAA,MAAM,CAACQ,IAAP,CAAYT,GAAG,CAACU,SAAJ,CAAcL,OAAd,CAAZ;AAEA,SAAOJ,MAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAevB,KAAf,EAAsBwB,SAAtB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkD;AACjE,MAAIb,EAAJ,EAAQc,QAAR,EAAkBzB,GAAlB,EAAuB0B,CAAvB,EAA0BC,QAA1B,EAAoCC,OAApC,EAA6CC,WAA7C,EAA0DC,KAA1D,EAAiEC,MAAjE,EAAyEC,CAAzE,EAA4EC,UAA5E,EAAwFC,UAAxF,CADiE,CAGjE;;AACA,MAAIZ,SAAS,GAAG,CAAZ,GAAgBC,OAApB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AAEDI,EAAAA,QAAQ,GAAGL,SAAS,GAAG,CAAvB;;AAEA,MAAIxB,KAAK,CAACqC,MAAN,CAAaR,QAAb,IAAyB7B,KAAK,CAACI,SAAnC,EAA8C;AAC5C,WAAO,KAAP;AACD,GAZgE,CAcjE;;;AACA,MAAIJ,KAAK,CAACqC,MAAN,CAAaR,QAAb,IAAyB7B,KAAK,CAACI,SAA/B,IAA4C,CAAhD,EAAmD;AACjD,WAAO,KAAP;AACD,GAjBgE,CAmBjE;AACA;AACA;;;AAEAF,EAAAA,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa0B,QAAb,IAAyB7B,KAAK,CAACsC,MAAN,CAAaT,QAAb,CAA/B;;AACA,MAAI3B,GAAG,IAAIF,KAAK,CAACM,MAAN,CAAauB,QAAb,CAAX,EAAmC;AACjC,WAAO,KAAP;AACD;;AAEDhB,EAAAA,EAAE,GAAGb,KAAK,CAACO,GAAN,CAAUW,UAAV,CAAqBhB,GAAG,EAAxB,CAAL;;AACA,MAAIW,EAAE,KAAK;AAAK;AAAZ,KAAuBA,EAAE,KAAK;AAAK;AAAnC,KAA8CA,EAAE,KAAK;AAAK;AAA9D,IAAuE;AACnE,aAAO,KAAP;AACD;;AAEH,SAAOX,GAAG,GAAGF,KAAK,CAACM,MAAN,CAAauB,QAAb,CAAb,EAAqC;AACnChB,IAAAA,EAAE,GAAGb,KAAK,CAACO,GAAN,CAAUW,UAAV,CAAqBhB,GAArB,CAAL;;AAEA,QAAIW,EAAE,KAAK;AAAK;AAAZ,OAAuBA,EAAE,KAAK;AAAK;AAAnC,OAA8CA,EAAE,KAAK;AAAK;AAA1D,OAAqE,CAAChB,OAAO,CAACgB,EAAD,CAAjF,EAAuF;AACrF,aAAO,KAAP;AACD;;AAEDX,IAAAA,GAAG;AACJ;;AAEDyB,EAAAA,QAAQ,GAAG5B,OAAO,CAACC,KAAD,EAAQwB,SAAS,GAAG,CAApB,CAAlB;AAEAM,EAAAA,OAAO,GAAGH,QAAQ,CAACY,KAAT,CAAe,GAAf,CAAV;AACAN,EAAAA,MAAM,GAAG,EAAT;;AACA,OAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,OAAO,CAAClB,MAAxB,EAAgCgB,CAAC,EAAjC,EAAqC;AACnCM,IAAAA,CAAC,GAAGJ,OAAO,CAACF,CAAD,CAAP,CAAWY,IAAX,EAAJ;;AACA,QAAI,CAACN,CAAL,EAAQ;AACN;AACA;AACA,UAAIN,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKE,OAAO,CAAClB,MAAR,GAAiB,CAAtC,EAAyC;AACvC;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAI,CAAC,WAAW6B,IAAX,CAAgBP,CAAhB,CAAL,EAAyB;AACvB,aAAO,KAAP;AACD;;AACD,QAAIA,CAAC,CAAChB,UAAF,CAAagB,CAAC,CAACtB,MAAF,GAAW,CAAxB,MAA+B;AAAK;AAAxC,MAAiD;AAC7CqB,QAAAA,MAAM,CAACd,IAAP,CAAYe,CAAC,CAAChB,UAAF,CAAa,CAAb,MAAoB;AAAK;AAAzB,UAAmC,QAAnC,GAA8C,OAA1D;AACD,OAFH,MAES,IAAIgB,CAAC,CAAChB,UAAF,CAAa,CAAb,MAAoB;AAAK;AAA7B,MAAsC;AAC3Ce,QAAAA,MAAM,CAACd,IAAP,CAAY,MAAZ;AACD,OAFM,MAEA;AACPc,MAAAA,MAAM,CAACd,IAAP,CAAY,EAAZ;AACD;AACF;;AAEDQ,EAAAA,QAAQ,GAAG5B,OAAO,CAACC,KAAD,EAAQwB,SAAR,CAAP,CAA0BgB,IAA1B,EAAX;;AACA,MAAIb,QAAQ,CAACe,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAChC,WAAO,KAAP;AACD;;AACD,MAAI1C,KAAK,CAACqC,MAAN,CAAab,SAAb,IAA0BxB,KAAK,CAACI,SAAhC,IAA6C,CAAjD,EAAoD;AAClD,WAAO,KAAP;AACD;;AACD0B,EAAAA,OAAO,GAAGrB,YAAY,CAACkB,QAAQ,CAACgB,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAD,CAAtB,CA9EiE,CAgFjE;AACA;;AACAZ,EAAAA,WAAW,GAAGD,OAAO,CAAClB,MAAtB;;AACA,MAAImB,WAAW,GAAGE,MAAM,CAACrB,MAAzB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AAED,MAAIc,MAAJ,EAAY;AACV,WAAO,IAAP;AACD;;AAEDM,EAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,YAAX,EAAyB,OAAzB,EAAkC,CAAlC,CAAR;AACAa,EAAAA,KAAK,CAACY,GAAN,GAAYT,UAAU,GAAG,CAACX,SAAD,EAAY,CAAZ,CAAzB,CA5FiE,CA8FjE;AACA;;AAEAQ,EAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsB,IAAtB,EAA4B,CAA5B,CAAR;AACAa,EAAAA,KAAK,CAACY,GAAN,GAAY,CAACpB,SAAD,EAAYA,SAAS,GAAG,CAAxB,CAAZ;;AAEA,OAAKI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,OAAO,CAAClB,MAAxB,EAAgCgB,CAAC,EAAjC,EAAqC;AACnCI,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsB,IAAtB,EAA4B,CAA5B,CAAR;AACAa,IAAAA,KAAK,CAACY,GAAN,GAAY,CAACpB,SAAD,EAAYA,SAAS,GAAG,CAAxB,CAAZ;;AACA,QAAIS,MAAM,CAACL,CAAD,CAAV,EAAe;AACbI,MAAAA,KAAK,CAACa,KAAN,GAAc,CAAC,CAAC,OAAD,EAAU,gBAAgBZ,MAAM,CAACL,CAAD,CAAhC,CAAD,CAAd;AACD;;AAEDI,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,gBAAX,EAA6B,GAA7B,EAAkC,CAAlC,CAAR;AACAa,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,QAAX,EAAqB,EAArB,EAAyB,CAAzB,CAAR;AACAa,IAAAA,KAAK,CAACc,OAAN,GAAgBhB,OAAO,CAACF,CAAD,CAAP,CAAWY,IAAX,EAAhB;AACAR,IAAAA,KAAK,CAACY,GAAN,GAAY,CAACpB,SAAD,EAAYA,SAAS,GAAG,CAAxB,CAAZ;AACAQ,IAAAA,KAAK,CAACe,QAAN,GAAiB,EAAjB;AACAf,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,iBAAX,EAA8B,GAA9B,EAAmC,CAAC,CAApC,CAAR;AAEAa,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,UAAX,EAAuB,IAAvB,EAA6B,CAAC,CAA9B,CAAR;AACD;;AAEDa,EAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,UAAX,EAAuB,IAAvB,EAA6B,CAAC,CAA9B,CAAR,CArHiE,CAsHjE;AAEA;;AACAa,EAAAA,KAAK,CAACY,GAAN,GAAYR,UAAU,GAAG,CAACZ,SAAS,GAAG,CAAb,EAAgB,CAAhB,CAAzB;AACA,MAAIwB,UAAU,GAAGhD,KAAK,CAACiD,OAAvB;;AAEA,OAAKpB,QAAQ,GAAGL,SAAS,GAAG,CAA5B,EAA+BK,QAAQ,GAAGJ,OAA1C,EAAmDI,QAAQ,EAA3D,EAA+D;AAC7D,QAAI7B,KAAK,CAACqC,MAAN,CAAaR,QAAb,IAAyB7B,KAAK,CAACI,SAAnC,EAA8C;AAC5C;AACD;;AAEDuB,IAAAA,QAAQ,GAAG5B,OAAO,CAACC,KAAD,EAAQ6B,QAAR,CAAP,CAAyBW,IAAzB,EAAX;;AACA,QAAIb,QAAQ,CAACe,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAChC;AACD;;AACD,QAAI1C,KAAK,CAACqC,MAAN,CAAaR,QAAb,IAAyB7B,KAAK,CAACI,SAA/B,IAA4C,CAAhD,EAAmD;AACjD;AACD;;AACD0B,IAAAA,OAAO,GAAGrB,YAAY,CAACkB,QAAQ,CAACgB,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAD,CAAtB;AAEAX,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsB,IAAtB,EAA4B,CAA5B,CAAR;;AAEA,SAAK,IAAI+B,EAAE,GAAG,CAAT,EAAYC,MAAM,GAAG,CAA1B,EAA6BD,EAAE,GAAGpB,OAAO,CAAClB,MAA1C,EAAkDsC,EAAE,EAApD,EAAwD;AACtDlB,MAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsB,IAAtB,EAA4B,CAA5B,CAAR;;AACA,UAAIc,MAAM,CAACiB,EAAD,CAAV,EAAgB;AACdlB,QAAAA,KAAK,CAACa,KAAN,GAAc,CAAC,CAAC,OAAD,EAAU,gBAAgBZ,MAAM,CAACiB,EAAD,CAAhC,CAAD,CAAd;AACD,OAJqD,CAMtD;AACA;AACA;AACA;AACA;AAEA;;;AACA,UAAIE,KAAK,GAAGtB,OAAO,CAACoB,EAAD,CAAP,CAAY,CAAZ,MAAmB,GAAnB,IAA0B,iBAAiBT,IAAjB,CAAsBX,OAAO,CAACoB,EAAD,CAAP,CAAYV,IAAZ,EAAtB,CAA1B,GAAsE,CAAtE,GAA0E,CAAtF;AACAxC,MAAAA,KAAK,CAACG,MAAN,CAAa0B,QAAb,KAA0BsB,MAAM,GAAGC,KAAnC;AACAD,MAAAA,MAAM,GAAG,CAACrB,OAAO,CAACoB,EAAD,CAAP,IAAe,EAAhB,EAAoBtC,MAApB,IAA8BwC,KAAK,GAAG,CAAH,GAAO,CAA1C,CAAT;AACApD,MAAAA,KAAK,CAACM,MAAN,CAAauB,QAAb,IAAyB7B,KAAK,CAACG,MAAN,CAAa0B,QAAb,IAAyBsB,MAAzB,GAAkC,CAA3D;AACAnD,MAAAA,KAAK,CAACiD,OAAN,GAAgB,CAAhB;AACAjD,MAAAA,KAAK,CAACqD,EAAN,CAASC,KAAT,CAAeC,QAAf,CAAwBvD,KAAxB,EAA+B6B,QAA/B,EAAyCA,QAAQ,GAAG,CAApD;AAEAG,MAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,UAAX,EAAuB,IAAvB,EAA6B,CAAC,CAA9B,CAAR;AACD;;AAEDa,IAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,UAAX,EAAuB,IAAvB,EAA6B,CAAC,CAA9B,CAAR;AACD,GApKgE,CAqKjE;;;AACAnB,EAAAA,KAAK,CAACiD,OAAN,GAAgBD,UAAhB;AACAhB,EAAAA,KAAK,GAAGhC,KAAK,CAACmB,IAAN,CAAW,aAAX,EAA0B,OAA1B,EAAmC,CAAC,CAApC,CAAR;AAEAgB,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBC,UAAU,CAAC,CAAD,CAAV,GAAgBP,QAAhC;AACA7B,EAAAA,KAAK,CAACC,IAAN,GAAa4B,QAAb;AACA,SAAO,IAAP;AACD,CA5KD","sourcesContent":["// Copied from https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/table.js\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60 /* ` */) {\n        if (backTicked) {\n          // make \\` close code sequence, but not open it;\n          // the reason is: `\\` is correct code block\n          backTicked = false;\n          lastBackTick = pos;\n        } else if (escapes % 2 === 0) {\n          backTicked = true;\n          lastBackTick = pos;\n        }\n      } else if (ch === 0x7c /* | */ && escapes % 2 === 0 && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c /* \\ */) {\n        escapes++;\n      } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7c /* | */ && ch !== 0x2d /* - */ && ch !== 0x3a /* : */) {\n      return false;\n    }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7c /* | */ && ch !== 0x2d /* - */ && ch !== 0x3a /* : */ && !isSpace(ch)) {\n      return false;\n    }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n    if (t.charCodeAt(t.length - 1) === 0x3a /* : */) {\n        aligns.push(t.charCodeAt(0) === 0x3a /* : */ ? 'center' : 'right');\n      } else if (t.charCodeAt(0) === 0x3a /* : */) {\n        aligns.push('left');\n      } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  token = state.push('table_open', 'table', 1);\n  token.map = tableLines = [startLine, 0];\n\n  // token     = state.push('thead_open', 'thead', 1);\n  // token.map = [ startLine, startLine + 1 ];\n\n  token = state.push('tr_open', 'tr', 1);\n  token.map = [startLine, startLine + 1];\n\n  for (i = 0; i < columns.length; i++) {\n    token = state.push('th_open', 'th', 1);\n    token.map = [startLine, startLine + 1];\n    if (aligns[i]) {\n      token.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n\n    token = state.push('paragraph_open', 'p', 1);\n    token = state.push('inline', '', 0);\n    token.content = columns[i].trim();\n    token.map = [startLine, startLine + 1];\n    token.children = [];\n    token = state.push('paragraph_close', 'p', -1);\n\n    token = state.push('th_close', 'th', -1);\n  }\n\n  token = state.push('tr_close', 'tr', -1);\n  // token     = state.push('thead_close', 'thead', -1);\n\n  // token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [startLine + 2, 0];\n  var oldLineMax = state.lineMax;\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) {\n      break;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n\n    for (var _i = 0, offset = 1; _i < columns.length; _i++) {\n      token = state.push('td_open', 'td', 1);\n      if (aligns[_i]) {\n        token.attrs = [['style', 'text-align:' + aligns[_i]]];\n      }\n\n      // https://github.com/markdown-it/markdown-it/blob/e6f19eab4204122e85e4a342e0c1c8486ff40c2d/lib/rules_block/state_block.js#L25\n      // bMarks => line begin offsets for fast jumps\n      // eMarks => line end offsets for fast jumps\n      // tShift => offsets of the first non-space characters (tabs not expanded)\n      // sCount => indents for each line (tabs expanded)\n\n      // Move bMarks when first char is ' ' for > to work\n      var shift = columns[_i][0] === ' ' || /^(\\d+\\.|\\*|-)$/.test(columns[_i].trim()) ? 1 : 0;\n      state.bMarks[nextLine] += offset + shift;\n      offset = (columns[_i] || '').length + (shift ? 0 : 1);\n      state.eMarks[nextLine] = state.bMarks[nextLine] + offset - 1;\n      state.lineMax = 1;\n      state.md.block.tokenize(state, nextLine, nextLine + 1);\n\n      token = state.push('td_close', 'td', -1);\n    }\n\n    token = state.push('tr_close', 'tr', -1);\n  }\n  // token = state.push('tbody_close', 'tbody', -1);\n  state.lineMax = oldLineMax;\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};"]},"metadata":{},"sourceType":"script"}