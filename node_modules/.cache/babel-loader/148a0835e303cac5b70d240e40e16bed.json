{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { createNewNewsFunc, getAllNews, deleteNewsFunc, editNewsFunc, getAllDetailNews, saveDetailNewsService, getDetailInforNewsById } from \"../../services/newsService\";\nimport { toast } from \"react-toastify\";\nexport const createNewNews = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewNewsFunc(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Tạo tin tức thành công\");\n        dispatch(saveNewsSuccess());\n        dispatch(fetchAllNewsStart());\n      } else {\n        dispatch(saveNewsFailed());\n      }\n    } catch (e) {\n      dispatch(saveNewsFailed());\n      console.log(\"saveNewsFailed error\", e);\n    }\n  };\n};\nexport const saveNewsSuccess = () => ({\n  type: actionTypes.CREATE_NEWS_SUCCESS\n});\nexport const saveNewsFailed = () => ({\n  type: actionTypes.CREATE_NEWS_FAILED\n});\nexport const fetchAllNewsStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllNews(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllNewsSuccess(res.news));\n      } else {\n        toast.success(\"Lấy tin tức thất bại\");\n        dispatch(fetchAllNewsFailed());\n      }\n    } catch (e) {\n      toast.success(\"Lấy tin tức thất bại\");\n      dispatch(fetchAllNewsFailed());\n      console.log(\"fetchAllNewsFailed error\", e);\n    }\n  };\n};\nexport const fetchAllNewsSuccess = data => ({\n  type: actionTypes.FETCH_ALL_NEWS_SUCCESS,\n  news: data\n});\nexport const fetchAllNewsFailed = () => ({\n  type: actionTypes.FETCH_ALL_NEWS_FAILED\n});\nexport const deleteNews = newsId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteNewsFunc(newsId);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Xóa tin tức thành công\");\n        dispatch(deleteNewsSuccess());\n        dispatch(fetchAllNewsStart());\n      } else {\n        toast.error(\"Xóa tin tức thất bại\");\n        dispatch(deleteNewsFailed());\n      }\n    } catch (e) {\n      dispatch(deleteNewsFailed());\n      console.log(\"deleteNewsFailed error\", e);\n    }\n  };\n};\nexport const deleteNewsSuccess = () => ({\n  type: actionTypes.DELETE_NEWS_SUCCESS\n});\nexport const deleteNewsFailed = () => ({\n  type: actionTypes.DELETE_NEWS_FAILED\n});\nexport const editNews = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editNewsFunc(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Cập nhật tin tức thành công\");\n        dispatch(editNewsSuccess());\n        dispatch(fetchAllNewsStart());\n      } else {\n        toast.error(\"Cập nhật tin tức thất bại\");\n        dispatch(editNewsFailed());\n      }\n    } catch (e) {\n      toast.error(\"Cập nhật tin tức thất bại\");\n      dispatch(editNewsFailed());\n      console.log(\"editNewsFailed error\", e);\n    }\n  };\n};\nexport const editNewsSuccess = () => ({\n  type: actionTypes.EDIT_NEWS_SUCCESS\n});\nexport const editNewsFailed = () => ({\n  type: actionTypes.EDIT_NEWS_FAILED\n});\nexport const fetchAllDetailNews = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDetailNews();\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DETAIL_NEWS_SUCCESS,\n          dataAllDetailNews: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DETAIL_NEWS_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"Fetch all detail News failed: \", e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DETAIL_NEWS_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailNews = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailNewsService(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Save detail News success\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_NEWS_SUCCESS\n        });\n      } else {\n        toast.error(\"Save detail News fail\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_NEWS_FAILED\n        });\n      }\n    } catch (e) {\n      toast.error(\"Save detail News fail\");\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_NEWS_FAILED\n      });\n    }\n  };\n};\nexport const fetchDetailsNewsById = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getDetailInforNewsById();\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_DETAIL_NEWS_SUCCESS,\n          dataDetailPolicy: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_DETAIL_NEWS_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"Fetch all detail Policy failed: \", e);\n      dispatch({\n        type: actionTypes.FETCH_DETAIL_NEWS_FAILED\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/LienSon/LienSon-FE/src/store/actions/newsActions.js"],"names":["actionTypes","createNewNewsFunc","getAllNews","deleteNewsFunc","editNewsFunc","getAllDetailNews","saveDetailNewsService","getDetailInforNewsById","toast","createNewNews","data","dispatch","getState","res","errCode","success","saveNewsSuccess","fetchAllNewsStart","saveNewsFailed","e","console","log","type","CREATE_NEWS_SUCCESS","CREATE_NEWS_FAILED","fetchAllNewsSuccess","news","fetchAllNewsFailed","FETCH_ALL_NEWS_SUCCESS","FETCH_ALL_NEWS_FAILED","deleteNews","newsId","deleteNewsSuccess","error","deleteNewsFailed","DELETE_NEWS_SUCCESS","DELETE_NEWS_FAILED","editNews","editNewsSuccess","editNewsFailed","EDIT_NEWS_SUCCESS","EDIT_NEWS_FAILED","fetchAllDetailNews","FETCH_ALL_DETAIL_NEWS_SUCCESS","dataAllDetailNews","FETCH_ALL_DETAIL_NEWS_FAILED","saveDetailNews","SAVE_DETAIL_NEWS_SUCCESS","SAVE_DETAIL_NEWS_FAILED","fetchDetailsNewsById","FETCH_DETAIL_NEWS_SUCCESS","dataDetailPolicy","FETCH_DETAIL_NEWS_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport {\r\n  createNewNewsFunc,\r\n  getAllNews,\r\n  deleteNewsFunc,\r\n  editNewsFunc,\r\n  getAllDetailNews,\r\n  saveDetailNewsService,\r\n  getDetailInforNewsById,\r\n} from \"../../services/newsService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const createNewNews = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewNewsFunc(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Tạo tin tức thành công\");\r\n        dispatch(saveNewsSuccess());\r\n        dispatch(fetchAllNewsStart());\r\n      } else {\r\n        dispatch(saveNewsFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(saveNewsFailed());\r\n      console.log(\"saveNewsFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveNewsSuccess = () => ({\r\n  type: actionTypes.CREATE_NEWS_SUCCESS,\r\n});\r\n\r\nexport const saveNewsFailed = () => ({\r\n  type: actionTypes.CREATE_NEWS_FAILED,\r\n});\r\n\r\nexport const fetchAllNewsStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllNews(\"ALL\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchAllNewsSuccess(res.news));\r\n      } else {\r\n        toast.success(\"Lấy tin tức thất bại\");\r\n        dispatch(fetchAllNewsFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.success(\"Lấy tin tức thất bại\");\r\n      dispatch(fetchAllNewsFailed());\r\n      console.log(\"fetchAllNewsFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllNewsSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_NEWS_SUCCESS,\r\n  news: data,\r\n});\r\n\r\nexport const fetchAllNewsFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_NEWS_FAILED,\r\n});\r\n\r\nexport const deleteNews = (newsId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteNewsFunc(newsId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Xóa tin tức thành công\");\r\n        dispatch(deleteNewsSuccess());\r\n        dispatch(fetchAllNewsStart());\r\n      } else {\r\n        toast.error(\"Xóa tin tức thất bại\");\r\n        dispatch(deleteNewsFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(deleteNewsFailed());\r\n      console.log(\"deleteNewsFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteNewsSuccess = () => ({\r\n  type: actionTypes.DELETE_NEWS_SUCCESS,\r\n});\r\n\r\nexport const deleteNewsFailed = () => ({\r\n  type: actionTypes.DELETE_NEWS_FAILED,\r\n});\r\n\r\nexport const editNews = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editNewsFunc(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Cập nhật tin tức thành công\");\r\n        dispatch(editNewsSuccess());\r\n        dispatch(fetchAllNewsStart());\r\n      } else {\r\n        toast.error(\"Cập nhật tin tức thất bại\");\r\n        dispatch(editNewsFailed());\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Cập nhật tin tức thất bại\");\r\n      dispatch(editNewsFailed());\r\n      console.log(\"editNewsFailed error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editNewsSuccess = () => ({\r\n  type: actionTypes.EDIT_NEWS_SUCCESS,\r\n});\r\n\r\nexport const editNewsFailed = () => ({\r\n  type: actionTypes.EDIT_NEWS_FAILED,\r\n});\r\n\r\nexport const fetchAllDetailNews = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllDetailNews();\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_DETAIL_NEWS_SUCCESS,\r\n          dataAllDetailNews: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_DETAIL_NEWS_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Fetch all detail News failed: \", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_DETAIL_NEWS_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveDetailNews = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await saveDetailNewsService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Save detail News success\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_NEWS_SUCCESS,\r\n        });\r\n      } else {\r\n        toast.error(\"Save detail News fail\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_NEWS_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Save detail News fail\");\r\n      dispatch({\r\n        type: actionTypes.SAVE_DETAIL_NEWS_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchDetailsNewsById = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getDetailInforNewsById();\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_DETAIL_NEWS_SUCCESS,\r\n          dataDetailPolicy: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_DETAIL_NEWS_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Fetch all detail Policy failed: \", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_DETAIL_NEWS_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}