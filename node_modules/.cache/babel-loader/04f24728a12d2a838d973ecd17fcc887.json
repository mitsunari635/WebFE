{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n  constructor({\n    url = '',\n    headers = {},\n    fetch\n  }) {\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this)\n    };\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   * @param scope The logout sope.\n   */\n\n\n  async signOut(jwt, scope = 'global') {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true\n      });\n      return {\n        data: null,\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n\n\n  async inviteUserByEmail(email, options = {}) {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: {\n          email,\n          data: options.data\n        },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n\n\n  async generateLink(params) {\n    try {\n      const {\n        options\n      } = params,\n            rest = __rest(params, [\"options\"]);\n\n      const body = Object.assign(Object.assign({}, rest), options);\n\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n        delete body['newEmail'];\n      }\n\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  } // User Admin API\n\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  async createUser(attributes) {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n\n\n  async listUsers(params) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    try {\n      const pagination = {\n        nextPage: null,\n        lastPage: 0,\n        total: 0\n      };\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''\n        },\n        xform: _noResolveJsonResponse\n      });\n      if (response.error) throw response.error;\n      const users = await response.json();\n      const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n      const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n\n      if (links.length > 0) {\n        links.forEach(link => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n          const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n          pagination[`${rel}Page`] = page;\n        });\n        pagination.total = parseInt(total);\n      }\n\n      return {\n        data: Object.assign(Object.assign({}, users), pagination),\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            users: []\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  async getUserById(uid) {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  async updateUserById(uid, attributes) {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  async deleteUser(id, shouldSoftDelete = false) {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete\n        },\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  async _listFactors(params) {\n    try {\n      const {\n        data,\n        error\n      } = await _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n        headers: this.headers,\n        xform: factors => {\n          return {\n            data: {\n              factors\n            },\n            error: null\n          };\n        }\n      });\n      return {\n        data,\n        error\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  async _deleteFactor(params) {\n    try {\n      const data = await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n        headers: this.headers\n      });\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/GoTrueAdminApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse, } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n    constructor({ url = '', headers = {}, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(fetch);\n        this.mfa = {\n            listFactors: this._listFactors.bind(this),\n            deleteFactor: this._deleteFactor.bind(this),\n        };\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     * @param scope The logout sope.\n     */\n    async signOut(jwt, scope = 'global') {\n        try {\n            await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n                headers: this.headers,\n                jwt,\n                noResolveJson: true,\n            });\n            return { data: null, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options Additional options to be included when inviting.\n     */\n    async inviteUserByEmail(email, options = {}) {\n        try {\n            return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n                body: { email, data: options.data },\n                headers: this.headers,\n                redirectTo: options.redirectTo,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */\n    async generateLink(params) {\n        try {\n            const { options } = params, rest = __rest(params, [\"options\"]);\n            const body = Object.assign(Object.assign({}, rest), options);\n            if ('newEmail' in rest) {\n                // replace newEmail with new_email in request body\n                body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n                delete body['newEmail'];\n            }\n            return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n                body: body,\n                headers: this.headers,\n                xform: _generateLinkResponse,\n                redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return {\n                    data: {\n                        properties: null,\n                        user: null,\n                    },\n                    error,\n                };\n            }\n            throw error;\n        }\n    }\n    // User Admin API\n    /**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async createUser(attributes) {\n        try {\n            return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n     */\n    async listUsers(params) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        try {\n            const pagination = { nextPage: null, lastPage: 0, total: 0 };\n            const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n                headers: this.headers,\n                noResolveJson: true,\n                query: {\n                    page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n                    per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '',\n                },\n                xform: _noResolveJsonResponse,\n            });\n            if (response.error)\n                throw response.error;\n            const users = await response.json();\n            const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n            const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n            if (links.length > 0) {\n                links.forEach((link) => {\n                    const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n                    const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n                    pagination[`${rel}Page`] = page;\n                });\n                pagination.total = parseInt(total);\n            }\n            return { data: Object.assign(Object.assign({}, users), pagination), error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { users: [] }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async getUserById(uid) {\n        try {\n            return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async updateUserById(uid, attributes) {\n        try {\n            return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\n     * Defaults to false for backward compatibility.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async deleteUser(id, shouldSoftDelete = false) {\n        try {\n            return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n                headers: this.headers,\n                body: {\n                    should_soft_delete: shouldSoftDelete,\n                },\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    async _listFactors(params) {\n        try {\n            const { data, error } = await _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n                headers: this.headers,\n                xform: (factors) => {\n                    return { data: { factors }, error: null };\n                },\n            });\n            return { data, error };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    async _deleteFactor(params) {\n        try {\n            const data = await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n                headers: this.headers,\n            });\n            return { data, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=GoTrueAdminApi.js.map"]},"metadata":{},"sourceType":"module"}