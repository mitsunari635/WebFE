{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nconst DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`; // default storage key uses the supabase project ref as a namespace\n\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n\n\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  /**\n   * Perform a query on a schema distinct from the default schema supplied via\n   * the `options.db.schema` constructor parameter.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The name of the schema to query\n   */\n\n\n  schema(schema) {\n    return this.rest.schema(schema);\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n\n\n  rpc(fn, args = {}, options) {\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n\n\n  channel(name, opts = {\n    config: {}\n  }) {\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n\n\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n\n\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n\n\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n\n  _getAccessToken() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    storage,\n    storageKey,\n    flowType,\n    debug\n  }, headers, fetch) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, source, token) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n      this.changedAccessToken = undefined;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/SupabaseClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nconst DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nconst DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n        this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n        this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n            fetch: this.fetch,\n        });\n        this._listenForAuthEvents();\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    /**\n     * Perform a query on a schema distinct from the default schema supplied via\n     * the `options.db.schema` constructor parameter.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The name of the schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            debug,\n            fetch,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            // Token has changed\n            this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            // Token is removed\n            this.realtime.setAuth(this.supabaseKey);\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map"]},"metadata":{},"sourceType":"module"}