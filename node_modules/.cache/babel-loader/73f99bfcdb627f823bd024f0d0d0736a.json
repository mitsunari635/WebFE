{"ast":null,"code":"import { supportsLocalStorage } from './helpers';\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\n\nexport const localStorageAdapter = {\n  getItem: key => {\n    if (!supportsLocalStorage()) {\n      return null;\n    }\n\n    return globalThis.localStorage.getItem(key);\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n\n    globalThis.localStorage.setItem(key, value);\n  },\n  removeItem: key => {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n\n    globalThis.localStorage.removeItem(key);\n  }\n};\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\n\nexport function memoryLocalStorageAdapter(store = {}) {\n  return {\n    getItem: key => {\n      return store[key] || null;\n    },\n    setItem: (key, value) => {\n      store[key] = value;\n    },\n    removeItem: key => {\n      delete store[key];\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/lib/local-storage.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAT,QAAqC,WAArC;AAGA;;AAEG;;AACH,OAAO,MAAM,mBAAmB,GAAqB;AACnD,EAAA,OAAO,EAAG,GAAD,IAAQ;AACf,QAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,WAAO,UAAU,CAAC,YAAX,CAAwB,OAAxB,CAAgC,GAAhC,CAAP;AACD,GAPkD;AAQnD,EAAA,OAAO,EAAE,CAAC,GAAD,EAAM,KAAN,KAAe;AACtB,QAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B;AACD;;AAED,IAAA,UAAU,CAAC,YAAX,CAAwB,OAAxB,CAAgC,GAAhC,EAAqC,KAArC;AACD,GAdkD;AAenD,EAAA,UAAU,EAAG,GAAD,IAAQ;AAClB,QAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B;AACD;;AAED,IAAA,UAAU,CAAC,YAAX,CAAwB,UAAxB,CAAmC,GAAnC;AACD;AArBkD,CAA9C;AAwBP;;;AAGG;;AACH,OAAM,SAAU,yBAAV,CAAoC,KAAA,GAAmC,EAAvE,EAAyE;AAC7E,SAAO;AACL,IAAA,OAAO,EAAG,GAAD,IAAQ;AACf,aAAO,KAAK,CAAC,GAAD,CAAL,IAAc,IAArB;AACD,KAHI;AAKL,IAAA,OAAO,EAAE,CAAC,GAAD,EAAM,KAAN,KAAe;AACtB,MAAA,KAAK,CAAC,GAAD,CAAL,GAAa,KAAb;AACD,KAPI;AASL,IAAA,UAAU,EAAG,GAAD,IAAQ;AAClB,aAAO,KAAK,CAAC,GAAD,CAAZ;AACD;AAXI,GAAP;AAaD","sourceRoot":"","sourcesContent":["import { supportsLocalStorage } from './helpers';\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\nexport const localStorageAdapter = {\n    getItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return null;\n        }\n        return globalThis.localStorage.getItem(key);\n    },\n    setItem: (key, value) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.setItem(key, value);\n    },\n    removeItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.removeItem(key);\n    },\n};\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\nexport function memoryLocalStorageAdapter(store = {}) {\n    return {\n        getItem: (key) => {\n            return store[key] || null;\n        },\n        setItem: (key, value) => {\n            store[key] = value;\n        },\n        removeItem: (key) => {\n            delete store[key];\n        },\n    };\n}\n//# sourceMappingURL=local-storage.js.map"]},"metadata":{},"sourceType":"module"}