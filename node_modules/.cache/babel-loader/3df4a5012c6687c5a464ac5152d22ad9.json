{"ast":null,"code":"// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch';\nexport default class PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.isMaybeSingle = builder.isMaybeSingle;\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {// skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    } // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n\n\n    const _fetch = this.fetch;\n\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(async res => {\n      var _a, _b, _c;\n\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text();\n\n          if (body === '') {// Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body;\n          } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n            data = body;\n          } else {\n            data = JSON.parse(body);\n          }\n        }\n\n        const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        } // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n\n\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned'\n            };\n            data = null;\n            count = null;\n            status = 406;\n            statusText = 'Not Acceptable';\n          } else if (data.length === 1) {\n            data = data[0];\n          } else {\n            data = null;\n          }\n        }\n      } else {\n        const body = await res.text();\n\n        try {\n          error = JSON.parse(body); // Workaround for https://github.com/supabase/postgrest-js/issues/295\n\n          if (Array.isArray(error) && res.status === 404) {\n            data = [];\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n        } catch (_d) {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204;\n            statusText = 'No Content';\n          } else {\n            error = {\n              message: body\n            };\n          }\n        }\n\n        if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText\n      };\n      return postgrestResponse;\n    });\n\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => {\n        var _a, _b, _c;\n\n        return {\n          error: {\n            message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n            details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n            hint: '',\n            code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n          },\n          data: null,\n          count: null,\n          status: 0,\n          statusText: ''\n        };\n      });\n    }\n\n    return res.then(onfulfilled, onrejected);\n  }\n\n}","map":{"version":3,"sources":["../../src/PostgrestBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch';\nexport default class PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.isMaybeSingle = builder.isMaybeSingle;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = nodeFetch;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                        error = {\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                            code: 'PGRST116',\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                            hint: null,\n                            message: 'JSON object requested, multiple (or no) rows returned',\n                        };\n                        data = null;\n                        count = null;\n                        status = 406;\n                        statusText = 'Not Acceptable';\n                    }\n                    else if (data.length === 1) {\n                        data = data[0];\n                    }\n                    else {\n                        data = null;\n                    }\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n//# sourceMappingURL=PostgrestBuilder.js.map"]},"metadata":{},"sourceType":"module"}