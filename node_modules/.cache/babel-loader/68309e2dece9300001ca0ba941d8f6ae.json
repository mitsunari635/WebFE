{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n\n\n  order(column, {\n    ascending = true,\n    nullsFirst,\n    foreignTable\n  } = {}) {\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  limit(count, {\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\n   * Only records within this range are returned.\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n   * and fourth rows of the query.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  range(from, to, {\n    foreignTable\n  } = {}) {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n\n\n  maybeSingle() {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json';\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    }\n\n    this.isMaybeSingle = true;\n    return this;\n  }\n  /**\n   * Return `data` as a string in CSV format.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n\n\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n\n\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text'\n  } = {}) {\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n\n\n  rollback() {\n    var _a;\n\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n\n    return this;\n  }\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n\n\n  returns() {\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../src/PostgrestTransformBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order foreign tables, but it doesn't affect the ordering of the\n     * current table.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.foreignTable - Set this to order a foreign table by foreign\n     * columns\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, } = {}) {\n        const key = foreignTable ? `${foreignTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n            this.headers['Accept'] = 'application/json';\n        }\n        else {\n            this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = this.headers['Accept'];\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestTransformBuilder.js.map"]},"metadata":{},"sourceType":"module"}