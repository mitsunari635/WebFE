{"ast":null,"code":"import actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  orders: [],\n  detailOrders: [],\n  userName: [],\n  statusList: [],\n  newOrders: []\n};\n\nconst orderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return { ...state,\n        orders: action.orders\n      };\n\n    case actionTypes.FETCH_ORDER_FAILED:\n      state.orders = [];\n      return { ...state\n      };\n\n    case actionTypes.DETAIL_BY_ORDER_SUCCESS:\n      state.detailOrders = action.detail;\n      return { ...state\n      };\n\n    case actionTypes.DETAIL_BY_ORDER_FAILED:\n      state.detailOrders = [];\n      return { ...state\n      };\n\n    case actionTypes.USER_BY_NUM_SUCCESS:\n      state.userName = action.user;\n      console.log(state.userName);\n      return { ...state\n      };\n\n    case actionTypes.USER_BY_NUM_FAILED:\n      state.userName = [];\n      return { ...state\n      };\n\n    case actionTypes.FETCH_STATUS_START:\n      let copyState = { ...state\n      };\n      copyState.isLoadingStatus = true;\n      return { ...copyState\n      };\n\n    case actionTypes.FETCH_STATUS_SUCCESS:\n      state.statusList = action.data;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_STATUS_FAILED:\n      state.statusList = [];\n      return { ...state\n      };\n\n    case actionTypes.EDIT_ORDER_STATUS_SUCCESS:\n      const updatedOrders = state.orders.map(order => order.id === action.payload.id ? { ...order,\n        statusID: action.payload.statusID\n      } : order);\n      return { ...state,\n        orders: updatedOrders\n      };\n\n    case actionTypes.CHECK_NEW_ORDER_SUCCESS:\n      state.newOrders = action.data;\n      return { ...state\n      };\n\n    case actionTypes.CHECK_NEW_ORDER_FAIL:\n      state.newOrders = [];\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default orderReducer;","map":{"version":3,"sources":["D:/LienSon/LienSon-FE/src/store/reducers/orderReducer.js"],"names":["actionTypes","initialState","orders","detailOrders","userName","statusList","newOrders","orderReducer","state","action","type","FETCH_ORDER_SUCCESS","FETCH_ORDER_FAILED","DETAIL_BY_ORDER_SUCCESS","detail","DETAIL_BY_ORDER_FAILED","USER_BY_NUM_SUCCESS","user","console","log","USER_BY_NUM_FAILED","FETCH_STATUS_START","copyState","isLoadingStatus","FETCH_STATUS_SUCCESS","data","FETCH_STATUS_FAILED","EDIT_ORDER_STATUS_SUCCESS","updatedOrders","map","order","id","payload","statusID","CHECK_NEW_ORDER_SUCCESS","CHECK_NEW_ORDER_FAIL"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,UAAU,EAAE,EAJO;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,WAAW,CAACW,mBAAjB;AACE,aAAO,EACL,GAAGH,KADE;AAELN,QAAAA,MAAM,EAAEO,MAAM,CAACP;AAFV,OAAP;;AAKF,SAAKF,WAAW,CAACY,kBAAjB;AACEJ,MAAAA,KAAK,CAACN,MAAN,GAAe,EAAf;AACA,aAAO,EACL,GAAGM;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACa,uBAAjB;AACEL,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACK,MAA5B;AACA,aAAO,EACL,GAAGN;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACe,sBAAjB;AACEP,MAAAA,KAAK,CAACL,YAAN,GAAqB,EAArB;AACA,aAAO,EACL,GAAGK;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACgB,mBAAjB;AACER,MAAAA,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACQ,IAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACJ,QAAlB;AACA,aAAO,EACL,GAAGI;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACoB,kBAAjB;AACEZ,MAAAA,KAAK,CAACJ,QAAN,GAAiB,EAAjB;AACA,aAAO,EACL,GAAGI;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACqB,kBAAjB;AACE,UAAIC,SAAS,GAAG,EAAE,GAAGd;AAAL,OAAhB;AACAc,MAAAA,SAAS,CAACC,eAAV,GAA4B,IAA5B;AACA,aAAO,EACL,GAAGD;AADE,OAAP;;AAGF,SAAKtB,WAAW,CAACwB,oBAAjB;AACEhB,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACgB,IAA1B;AACA,aAAO,EACL,GAAGjB;AADE,OAAP;;AAGF,SAAKR,WAAW,CAAC0B,mBAAjB;AACElB,MAAAA,KAAK,CAACH,UAAN,GAAmB,EAAnB;AACA,aAAO,EACL,GAAGG;AADE,OAAP;;AAGF,SAAKR,WAAW,CAAC2B,yBAAjB;AACE,YAAMC,aAAa,GAAGpB,KAAK,CAACN,MAAN,CAAa2B,GAAb,CAAkBC,KAAD,IACrCA,KAAK,CAACC,EAAN,KAAatB,MAAM,CAACuB,OAAP,CAAeD,EAA5B,GACI,EAAE,GAAGD,KAAL;AAAYG,QAAAA,QAAQ,EAAExB,MAAM,CAACuB,OAAP,CAAeC;AAArC,OADJ,GAEIH,KAHgB,CAAtB;AAKA,aAAO,EACL,GAAGtB,KADE;AAELN,QAAAA,MAAM,EAAE0B;AAFH,OAAP;;AAIF,SAAK5B,WAAW,CAACkC,uBAAjB;AACE1B,MAAAA,KAAK,CAACF,SAAN,GAAkBG,MAAM,CAACgB,IAAzB;AACA,aAAO,EACL,GAAGjB;AADE,OAAP;;AAGF,SAAKR,WAAW,CAACmC,oBAAjB;AACE3B,MAAAA,KAAK,CAACF,SAAN,GAAkB,EAAlB;AACA,aAAO,EACL,GAAGE;AADE,OAAP;;AAGF;AACE,aAAOA,KAAP;AAtEJ;AAwED,CAzED;;AA2EA,eAAeD,YAAf","sourcesContent":["import actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  detailOrders: [],\r\n  userName: [],\r\n  statusList: [],\r\n  newOrders: [],\r\n};\r\n\r\nconst orderReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_ORDER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        orders: action.orders,\r\n      };\r\n\r\n    case actionTypes.FETCH_ORDER_FAILED:\r\n      state.orders = [];\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.DETAIL_BY_ORDER_SUCCESS:\r\n      state.detailOrders = action.detail;\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.DETAIL_BY_ORDER_FAILED:\r\n      state.detailOrders = [];\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.USER_BY_NUM_SUCCESS:\r\n      state.userName = action.user;\r\n      console.log(state.userName);\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.USER_BY_NUM_FAILED:\r\n      state.userName = [];\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.FETCH_STATUS_START:\r\n      let copyState = { ...state };\r\n      copyState.isLoadingStatus = true;\r\n      return {\r\n        ...copyState,\r\n      };\r\n    case actionTypes.FETCH_STATUS_SUCCESS:\r\n      state.statusList = action.data;\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.FETCH_STATUS_FAILED:\r\n      state.statusList = [];\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.EDIT_ORDER_STATUS_SUCCESS:\r\n      const updatedOrders = state.orders.map((order) =>\r\n        order.id === action.payload.id\r\n          ? { ...order, statusID: action.payload.statusID }\r\n          : order\r\n      );\r\n      return {\r\n        ...state,\r\n        orders: updatedOrders,\r\n      };\r\n    case actionTypes.CHECK_NEW_ORDER_SUCCESS:\r\n      state.newOrders = action.data;\r\n      return {\r\n        ...state,\r\n      };\r\n    case actionTypes.CHECK_NEW_ORDER_FAIL:\r\n      state.newOrders = [];\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default orderReducer;\r\n"]},"metadata":{},"sourceType":"module"}