{"ast":null,"code":"import { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\n\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\nexport class LockAcquireTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.isAcquireTimeout = true;\n  }\n\n}\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\n\nexport async function navigatorLock(name, acquireTimeout, fn) {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n  }\n\n  const abortController = new globalThis.AbortController();\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n      }\n    }, acquireTimeout);\n  } // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n\n\n  return await globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {\n    mode: 'exclusive',\n    ifAvailable: true\n  } : {\n    mode: 'exclusive',\n    signal: abortController.signal\n  }, async lock => {\n    if (lock) {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n      }\n\n      try {\n        return await fn();\n      } finally {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n        }\n      }\n    } else {\n      if (acquireTimeout === 0) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n        }\n\n        throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n      } else {\n        if (internals.debug) {\n          try {\n            const result = await globalThis.navigator.locks.query();\n            console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n          } catch (e) {\n            console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\n          }\n        } // Browser is not following the Navigator LockManager spec, it\n        // returned a null lock when we didn't use ifAvailable. So we can\n        // pretend the lock is acquired in the name of backward compatibility\n        // and user experience and just run the function.\n\n\n        console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n        return await fn();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/lib/locks.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAT,QAAqC,WAArC;AAEA;;AAEG;;AACH,OAAO,MAAM,SAAS,GAAG;AACvB;;AAEG;AACH,EAAA,KAAK,EAAE,CAAC,EACN,UAAU,IACV,oBAAoB,EADpB,IAEA,UAAU,CAAC,YAFX,IAGA,UAAU,CAAC,YAAX,CAAwB,OAAxB,CAAgC,gCAAhC,MAAsE,MAJhE;AAJe,CAAlB;AAYP,OAAM,MAAgB,uBAAhB,SAAgD,KAAhD,CAAqD;AAGzD,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,UAAM,OAAN;AAHc,SAAA,gBAAA,GAAmB,IAAnB;AAIf;;AALwD;AAQ3D,OAAM,MAAO,gCAAP,SAAgD,uBAAhD,CAAuE;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;;AACH,OAAO,eAAe,aAAf,CACL,IADK,EAEL,cAFK,EAGL,EAHK,EAGe;AAEpB,MAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,IAAA,OAAO,CAAC,GAAR,CAAY,kDAAZ,EAAgE,IAAhE,EAAsE,cAAtE;AACD;;AAED,QAAM,eAAe,GAAG,IAAI,UAAU,CAAC,eAAf,EAAxB;;AAEA,MAAI,cAAc,GAAG,CAArB,EAAwB;AACtB,IAAA,UAAU,CAAC,MAAK;AACd,MAAA,eAAe,CAAC,KAAhB;;AACA,UAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,QAAA,OAAO,CAAC,GAAR,CAAY,sDAAZ,EAAoE,IAApE;AACD;AACF,KALS,EAKP,cALO,CAAV;AAMD,GAfmB,CAiBpB;;;AAEA,SAAO,MAAM,UAAU,CAAC,SAAX,CAAqB,KAArB,CAA2B,OAA3B,CACX,IADW,EAEX,cAAc,KAAK,CAAnB,GACI;AACE,IAAA,IAAI,EAAE,WADR;AAEE,IAAA,WAAW,EAAE;AAFf,GADJ,GAKI;AACE,IAAA,IAAI,EAAE,WADR;AAEE,IAAA,MAAM,EAAE,eAAe,CAAC;AAF1B,GAPO,EAWX,MAAO,IAAP,IAAe;AACb,QAAI,IAAJ,EAAU;AACR,UAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,QAAA,OAAO,CAAC,GAAR,CAAY,8CAAZ,EAA4D,IAA5D,EAAkE,IAAI,CAAC,IAAvE;AACD;;AAED,UAAI;AACF,eAAO,MAAM,EAAE,EAAf;AACD,OAFD,SAEU;AACR,YAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,UAAA,OAAO,CAAC,GAAR,CAAY,8CAAZ,EAA4D,IAA5D,EAAkE,IAAI,CAAC,IAAvE;AACD;AACF;AACF,KAZD,MAYO;AACL,UAAI,cAAc,KAAK,CAAvB,EAA0B;AACxB,YAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,UAAA,OAAO,CAAC,GAAR,CAAY,+DAAZ,EAA6E,IAA7E;AACD;;AAED,cAAM,IAAI,gCAAJ,CACJ,sDAAsD,IAAI,sBADtD,CAAN;AAGD,OARD,MAQO;AACL,YAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,cAAI;AACF,kBAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAX,CAAqB,KAArB,CAA2B,KAA3B,EAArB;AAEA,YAAA,OAAO,CAAC,GAAR,CACE,kDADF,EAEE,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAFF;AAID,WAPD,CAOE,OAAO,CAAP,EAAe;AACf,YAAA,OAAO,CAAC,IAAR,CACE,sEADF,EAEE,CAFF;AAID;AACF,SAfI,CAiBL;AACA;AACA;AACA;;;AACA,QAAA,OAAO,CAAC,IAAR,CACE,yPADF;AAIA,eAAO,MAAM,EAAE,EAAf;AACD;AACF;AACF,GA7DU,CAAb;AA+DD","sourceRoot":"","sourcesContent":["import { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\nexport const internals = {\n    /**\n     * @experimental\n     */\n    debug: !!(globalThis &&\n        supportsLocalStorage() &&\n        globalThis.localStorage &&\n        globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'),\n};\nexport class LockAcquireTimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        this.isAcquireTimeout = true;\n    }\n}\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n    if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n    }\n    const abortController = new globalThis.AbortController();\n    if (acquireTimeout > 0) {\n        setTimeout(() => {\n            abortController.abort();\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n            }\n        }, acquireTimeout);\n    }\n    // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n    return await globalThis.navigator.locks.request(name, acquireTimeout === 0\n        ? {\n            mode: 'exclusive',\n            ifAvailable: true,\n        }\n        : {\n            mode: 'exclusive',\n            signal: abortController.signal,\n        }, async (lock) => {\n        if (lock) {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n            }\n            try {\n                return await fn();\n            }\n            finally {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n                }\n            }\n        }\n        else {\n            if (acquireTimeout === 0) {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n                }\n                throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n            }\n            else {\n                if (internals.debug) {\n                    try {\n                        const result = await globalThis.navigator.locks.query();\n                        console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n                    }\n                    catch (e) {\n                        console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\n                    }\n                }\n                // Browser is not following the Navigator LockManager spec, it\n                // returned a null lock when we didn't use ifAvailable. So we can\n                // pretend the lock is acquired in the name of backward compatibility\n                // and user experience and just run the function.\n                console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n                return await fn();\n            }\n        }\n    });\n}\n//# sourceMappingURL=locks.js.map"]},"metadata":{},"sourceType":"module"}